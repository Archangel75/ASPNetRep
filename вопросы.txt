1. new override
Если вы работаете с экземпляром класса-наследника через его родительский класс,
то в случае, если вы будете вызывать переопределенный виртуальный метод (override),
то будет вызвана его реализация из наследника, а если перекрытый (new), то будет вызван метод базового класса. 
class Program
    {
        static void Main(string[] args)
        {
            Base derivedAsBase = new Derived();

            derivedAsBase.First();  // Derived.First(), выведет "First from Derived"                
            derivedAsBase.Second(); // Base.Second(), выведет "Second from Base"

            Console.ReadLine();
        }
    }
    class Base
    {
        public virtual void First()
        {
            Console.WriteLine("First from Base");
        }

        public virtual void Second()
        {
            Console.WriteLine("Second from Base");
        }
    }
    class Derived : Base
    {
        public override void First()
        {
            Console.WriteLine("First from Derived");
        }

        public new void Second()
        {
            Console.WriteLine("Second from Derived");
        }
    }

2. абстрактный и интерфейс
Абстрактный(Abstract) класс - класс, который имеет хотя б 1 абстрактный (не определенный) метод; обозначается как abstract.
Интерфейс - такой же абстрактный класс,только в нем не может быть свойств и не определены тела у методов.
Так же стоит заметить, что абстрактный класс наследуется(etxends), а интерфейс реализуется (implements). Вот и возникает разница между ними,
что наследовать мы можем только 1 класс, а реализовать сколько угодно.
ВАЖНО! При реализации интерфейса, необходимо реализовать все его методы, иначе будет Fatal error, так же это можно избежать, присвоив слово abstract.
interface I { 
    public function F(); 
    public function say(); 
} 
 
abstract class A implements I { 
    function say() { 
        echo 'Hello'; 
    } 
    // function F() - не реализована 
} 

абстрактный и базовый
Абстрактный не может иметь конструктора.


3. int и uint
UINT не может быть отрицательным.

4. класс и структура
Во-первых, структуры относятся к типам значений, и поэтому ими можно оперировать непосредственно, а не по ссылке.
А это означает в ряде случаев существенную экономию оперативной памяти. Если нужно просто сохранить группу связанных вместе данных,
не требующих наследования и обращения по ссылке, то с точки зрения производительности для них лучше выбрать структуру. 
Во-вторых, когда одна структура присваивается другой, создается копия ее объекта.